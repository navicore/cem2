Stack trace for list-map-helper Cons case:

Initial:  ( func acc head tail )
Concrete: ( [f] [] 5 [3] )

Goal: ( tail func new-acc ) where new-acc = (f(head)::acc)
      ( [3] [f] [f(5)] )

Step 1: dup func
  over is wrong - copies TOS
  Need to dup func which is at position 3

  Option A: Bring func to top, dup, put back
    rot rot         # ( acc head func tail )
    over            # ( acc head func tail func ) - copies tail! WRONG

  Option B: Use stack depth 4 operations
    There's no "pick" operation for depth 4

  Option C: Simpler pattern - duplicate func first before match
    Change calling convention to ( list func func acc )
    Then Cons receives: ( func func acc head tail )

Let me try option C - pass TWO copies of func!
